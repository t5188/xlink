#!/system/bin/sh
scripts=$(realpath $0)
scripts_dir=$(dirname ${scripts})
parent_dir=$(dirname ${scripts_dir})
yq=${parent_dir}/binary/yq
clear

source ${scripts_dir}/settings.ini

init_uids() {
  uid=""
  uids=()
  if [ -f "${parent_dir}/log/uids.list" ]; then
    rm "${parent_dir}/log/uids.list"
  fi

  for package_name in "${package_list[@]}"; do
    uid=$(awk -v package="${package_name}" '$1 == package {print $2}' /data/system/packages.list)
    if [ -n "${uid}" ]; then
      uids+=("${uid}")
      echo "${package_name}: ${uid}" >>"${parent_dir}/log/uids.list"
    fi
  done

  for package_name in "${appclones[@]}"; do
    uid=$(awk -v package="${package_name}" '$1 == package {print $2}' /data/system/packages.list)
    if [ -n "${uid}" ]; then
      uid="999$uid"
      uids+=("${uid}")
      echo "${package_name}: ${uid}" >>"${parent_dir}/log/uids.list"
    fi
  done

  sort -t ':' -k2 -n "${parent_dir}/log/uids.list" -o "${parent_dir}/log/uids.list"
  uids=($(printf "%s\n" "${uids[@]}" | sort -n | uniq))
}

init_base() {
  if [[ "${recommended_cfg}" == "disable" ]]; then
    local c=1
    for file in $(find "${parent_dir}/confx" -type f -name "*.json" -not -name "api.json"); do
      if awk '/"inbounds"/ {found=1; exit} END {exit !found}' "$file"; then
        base_file="${parent_dir}/confx/$(basename "$file")"
        local c=0
        break
      fi
    done
    [[ ${c} == 0 ]] || {
      toast "⚠️check inbounds"
      exit 1
    }
  elif [[ "${recommended_cfg}" == "enable" ]]; then
    base_file="${parent_dir}/confx/base.json"
    truncate -s 0 "${base_file}"
    $yq -i --output-format=json '. = {"log":{"access":"../log/access.log","error":"../log/error.log","loglevel":"debug","dnsLog":true,"maskAddress":"half"},"inbounds":[{"listen":"::","port":1536,"protocol":"dokodemo-door","sniffing":{"enabled":true,"destOverride":["http","tls"],"routeOnly":false},"settings":{"network":"tcp,udp","followRedirect":true},"streamSettings":{"sockopt":{"tproxy":"tproxy"}},"tag":"trp-in"}],"outbounds":[{"protocol":"freedom","settings":{"domainStrategy":"UseIP"},"tag":"direct"},{"tag":"block","protocol":"blackhole","settings":{"response":{"type":"http"}}},{"tag":"dns-out","protocol":"dns","settings":{"address":"8.8.8.8"}}]}' "${base_file}"
  fi
  $yq -i --output-format=json ".log.loglevel = \"${xray_log}\"" "${base_file}"
  tp_port=$($yq eval '.inbounds[0].port' "${base_file}")
}

init_dns() {
  [[ "${recommended_cfg}" == "disable" ]] && return
  for file in $(find "${parent_dir}/confx" -type f -name "*.json" -not -name "api.json"); do
    if awk '/"servers"/ {found=1; exit} END {exit !found}' "$file"; then
      dns_file="${parent_dir}/confx/$(basename "$file")"
      break
    fi
  done
  if [ -z "${dns_file}" ]; then
    dns_file="${parent_dir}/confx/dns.json"
  fi
  truncate -s 0 "${dns_file}"
  $yq -i --output-format=json '. = {"dns":{"hosts":{"domain:googleapis.cn":"googleapis.com","geosite:category-ads-all":"127.0.0.1"},"servers":[{"domains":["geosite:geolocation-!cn"],"address":"https://dns.google/dns-query"},{"domains":["domain:acstudycn.eu.org"],"address":"https+local://223.5.5.5/dns-query"},"https+local://dns.acstudycn.eu.org/dns-query"],"tag":"dns","queryStrategy":"UseIPv4"}}' "${dns_file}"
  [[ "${ip6tables}" == "disable" ]] && return
  $yq -i --output-format=json '.dns.queryStrategy = "UseIP"' "${dns_file}"
}

init_route() {
  [[ "${recommended_cfg}" == "disable" ]] && return
  for file in $(find "${parent_dir}/confx" -type f -name "*.json" -not -name "api.json"); do
    if awk '/"rules"/ {found=1; exit} END {exit !found}' "$file"; then
      routing_file="${parent_dir}/confx/$(basename "$file")"
      break
    fi
  done
  if [ -z "${routing_file}" ]; then
    routing_file="${parent_dir}/confx/routing.json"
  fi
  truncate -s 0 "${routing_file}"
  $yq -i --output-format=json '. = {"routing":{"domainStrategy":"IPOnDemand","domainMatcher":"mph","rules":[{"type":"field","port":53,"inboundTag":["trp-in"],"outboundTag":"dns-out"},{"type":"field","outboundTag":"direct","protocol":["bittorrent"]},{"domains":["geosite:category-ads-all"],"outboundTag":"block","type":"field"},{"domains":["domain:acstudycn.eu.org"],"outboundTag":"direct","type":"field"},{"domains":["geosite:geolocation-!cn"],"outboundTag":"proxy","type":"field"},{"domains":["geosite:cn","geosite:private"],"outboundTag":"direct","type":"field"},{"ip":["geoip:cn","geoip:private"],"outboundTag":"direct","type":"field"},{"port":"0-65535","outboundTag":"proxy","type":"field"}]}}' "${routing_file}"
}

start_tproxy() {
  if pidof ${bin_xray} >/dev/null 2>&1; then
    log Info "Close existing processes $(pidof ${bin_xray})"
    stop_tproxy
  fi
  if [ -f "${bin_xray}" ]; then
    chmod +x ${bin_xray}
    chown root:net_admin ${bin_xray}
    chmod o+rw ${public_logs_dir}
    init_base
    init_dns
    init_route
    init_uids
    run_add_trp
    run_disable_quic
    ulimit -SHn 1000000
    nohup busybox setuidgid ${xray_user}:${xray_group} ${bin_xray} run -confdir ${xray_confx_dir} >/dev/null 2>&1 &
    description "🤪" "started"
  else
    log Error "Binary ${bin_xray} not found"
    exit 1
  fi
  echo "${bin_xray##*/}:$(pidof ${bin_xray})" >${parent_dir}/log/pid.txt
  log Info "Create a new process $(pidof ${bin_xray})"
  add_cron
  toast "Xray is running."
  log Info "Xray process ($(pidof ${bin_xray})) started." >"${parent_dir}/log/run.log"
}

stop_tproxy() {
  if [ -f "${parent_dir}/log/pid.txt" ]; then
    run_del_trp >/dev/null 2>&1
    del_disable_quic
    del_cron
    description "🥴" "stopped"
    kill -9 $(awk -F ':' 'NR==1 {print $2}' ${parent_dir}/log/pid.txt) >/dev/null 2>&1
    find "${parent_dir}" -type f \( -name "*.log" -o -name "*.txt" -o -name "*.list" \) -exec rm -f {} +
  fi
  toast "Xray has stopped."
  log Info "Xray has stopped." >"${parent_dir}/log/run.log"
  ${scripts_dir}/net.inotify D
}

add_trp() {
  ${1} rule add fwmark "${fwmark}" table ${2} priority 1000
  ${1} route add local default dev lo table ${2}

  ${3} -t mangle -N ${4}_EXTERNAL
  ${3} -t mangle -F ${4}_EXTERNAL
  ${3} -t mangle -N ${4}_LOCAL
  ${3} -t mangle -F ${4}_LOCAL
  ${3} -t mangle -N DIVERT
  ${3} -t mangle -F DIVERT

  ${3} -t mangle -A ${4}_LOCAL -p udp --dport 53 -j MARK --set-mark ${fwmark}
  ${3} -t mangle -A ${4}_LOCAL -p tcp --dport 53 -j MARK --set-mark ${fwmark}

  ${3} -t mangle -A ${4}_EXTERNAL -p udp --dport 53 -j TPROXY --on-port ${tp_port} --tproxy-mark ${fwmark}
  ${3} -t mangle -A ${4}_EXTERNAL -p tcp --dport 53 -j TPROXY --on-port ${tp_port} --tproxy-mark ${fwmark}

  for subnet in ${5}; do
    ${3} -t mangle -A ${4}_EXTERNAL -d ${subnet} -j RETURN
    ${3} -t mangle -A ${4}_LOCAL -d ${subnet} -j RETURN
  done

  ${3} -t mangle -A ${4}_EXTERNAL -p tcp -i lo -j TPROXY --on-port ${tp_port} --tproxy-mark ${fwmark}
  ${3} -t mangle -A ${4}_EXTERNAL -p udp -i lo -j TPROXY --on-port ${tp_port} --tproxy-mark ${fwmark}

  if [ "${ap_list}" != "" ]; then
    for ap in ${ap_list[@]}; do
      ${3} -t mangle -A ${4}_EXTERNAL -p tcp -i "${ap}" -j TPROXY --on-port "${tp_port}" --tproxy-mark "${fwmark}"
      ${3} -t mangle -A ${4}_EXTERNAL -p udp -i "${ap}" -j TPROXY --on-port "${tp_port}" --tproxy-mark "${fwmark}"
    done
  fi

  if [[ -n "${AIDs}" ]]; then
    for AID in ${AIDs[@]}; do
      ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${AID} -p tcp -j MARK --set-mark ${fwmark}
      ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${AID} -p udp -j MARK --set-mark ${fwmark}
    done
  fi
  case "${proxy_mode}" in
  "blacklist")
    if [[ ${#uids[@]} -gt 0 ]]; then
      for appid in ${6}; do
        ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p tcp ! --dport 53 -j RETURN
        ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p udp ! --dport 53 -j RETURN
      done
      ${3} -t mangle -A ${4}_LOCAL -j MARK --set-mark ${fwmark}
    else
      ${3} -t mangle -A ${4}_LOCAL -j MARK --set-mark ${fwmark}
    fi
    ;;
  "whitelist")
    if [[ ${#uids[@]} -gt 0 ]]; then
      for appid in ${6}; do
        ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p tcp -j MARK --set-mark ${fwmark}
        ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p udp -j MARK --set-mark ${fwmark}
      done
    else
      ${3} -t mangle -A ${4}_LOCAL -j MARK --set-mark ${fwmark}
    fi
    ;;
  *)
    log Error "proxy_mode incorrect" >>"${parent_dir}/log/run.log"
    ;;
  esac

  ${3} -t mangle -I ${4}_LOCAL -m owner --gid-owner ${xray_group} -j RETURN
  ${3} -t mangle -A DIVERT -j MARK --set-mark "${fwmark}"
  ${3} -t mangle -A DIVERT -j ACCEPT

  ${3} -t mangle -A PREROUTING -j ${4}_EXTERNAL
  ${3} -t mangle -I PREROUTING -p tcp -m socket -j DIVERT
  ${3} -t mangle -A OUTPUT -j ${4}_LOCAL
}

del_trp() {
  ${1} rule del fwmark "${fwmark}" table ${2} priority 1000
  ${1} route del local default dev lo table ${2}
  ${1} route flush table ${2}
  ${3} -t mangle -D PREROUTING -j ${4}_EXTERNAL
  ${3} -t mangle -D PREROUTING -p tcp -m socket -j DIVERT
  ${3} -t mangle -D OUTPUT -j ${4}_LOCAL
  ${3} -t mangle -F ${4}_EXTERNAL
  ${3} -t mangle -F DIVERT
  ${3} -t mangle -F ${4}_LOCAL
  ${3} -t mangle -X ${4}_EXTERNAL
  ${3} -t mangle -X DIVERT
  ${3} -t mangle -X ${4}_LOCAL
}

run_add_trp() {
  add_trp "ip -4" "${table}" "${IPV4}" "${chain_name}4" "${intranet4[*]}" "${uids[*]}"
  [[ "${ip6tables}" == "disable" ]] && return
  add_trp "ip -6" "${table}" "${IPV6}" "${chain_name}6" "${intranet6[*]}" "${uids[*]}"
}

run_del_trp() {
  del_trp "ip -4" "${table}" "${IPV4}" "${chain_name}4"
  [[ "${ip6tables}" == "disable" ]] && return
  del_trp "ip -6" "${table}" "${IPV6}" "${chain_name}6"
}

add_cron() {
  if [[ "${crond_task}" == "enable" ]]; then
    crontab_file="${scripts_dir}/root"
    if pgrep busybox crond >/dev/null; then
      kill -9 $(pgrep busybox crond)
    fi
    echo '5 0,12 * * * touch /data/adb/modules/xlink/disable && sleep 3 && rm /data/adb/modules/xlink/disable' >${crontab_file}
    nohup busybox crond -c ${scripts_dir}/ >/dev/null 2>&1 &
    log Info "New task: $(busybox crontab -l -c ${scripts_dir}/)"
  else
    log Warn "crond_task is not set to enable. No crond task created."
  fi
}

del_cron() {
  if pgrep busybox crond >/dev/null; then
    kill -9 $(pgrep busybox crond)
    rm ${scripts_dir}/root >/dev/null 2>&1
  fi
}

disable_quic() {
  ${1} ${2} OUTPUT -p udp --dport 443 -m owner ! --uid-owner ${xray_user} ! --gid-owner ${xray_group} -j REJECT
  ${1} ${2} OUTPUT -p udp --dport 80 -m owner ! --uid-owner ${xray_user} ! --gid-owner ${xray_group} -j REJECT
}

run_disable_quic() {
  if [ "${quic}" = "disable" ]; then
    disable_quic "${IPV4}" "-I"
    [[ "${ip6tables}" == "disable" ]] && return
    disable_quic "${IPV6}" "-I"
  fi
}

del_disable_quic() {
  if [ "${quic}" = "disable" ]; then
    disable_quic "${IPV4}" "-D"
    [[ "${ip6tables}" == "disable" ]] && return
    disable_quic "${IPV6}" "-D"
  fi
}

version() {
  if [ -f "${bin_xray}" ]; then
    version=$(${bin_xray} version | head -n 1 | awk '{print $2}')
  fi
}

description() {
  local symbol=$1
  local event=$2
  version
  prop_file="/data/adb/modules/xlink/module.prop"
  core_name="${chain_name}"
  current_time=$(date "+[%m.%d %H:%M]")
  sed -i "/description/c\description=${current_time} ${symbol} ${core_name} ${version} ${network_mode} ${event}" "${prop_file}"
}

case "$1" in
enable)
  start_tproxy
  ;;
disable)
  stop_tproxy
  ;;
esac

# xlink.service
