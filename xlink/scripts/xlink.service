#!/system/bin/sh
scripts=$(realpath $0)
scripts_dir=$(dirname ${scripts})
parent_dir=$(dirname ${scripts_dir})

clear

source ${scripts_dir}/settings.ini

# check iptables_version
ipt1=$(iptables --version | busybox awk '/^iptables/ {print $2}')
ipt2="v1.6.1"
var1=$(echo "$ipt1" | busybox sed 's/v//g; s/\.//g')
var2=$(echo "$ipt2" | busybox sed 's/v//g; s/\.//g')
if [ "$var1" -ge "$var2" ]; then
  IPV="iptables -w 64"
  IP6V="ip6tables -w 64"
else
  IPV="iptables"
  IP6V="ip6tables"
fi

init_uids() {
  [ -f "uids.list" ] && rm "uids.list"
  uid=""
  uids=""
  for package_name in ${package_list[@]}; do
    uid=$(busybox awk -v package="${package_name}" '$1 ~ package {print $2}' /data/system/packages.list)
    [ -n "${uid}" ] && uids+=("${uid}") &&
      echo "${package_name}: ${uid}" >>${scripts_dir}/uids.list
  done
}

start_tproxy() {
  if pidof ${Bin} >/dev/null 2>&1; then
    log Info "Close existing processes $(pidof ${Bin})"
    stop_tproxy
  fi
  if [ -f "${Bin}" ]; then
    chmod +x ${Bin}
    chown root:net_admin ${Bin}
    init_uids
    chain_name="${Bin##*/}"
    run_add_trp
    run_disable_quic
    ulimit -SHn 1000000
    wait
    export XRAY_LOCATION_ASSET="${parent_dir}/binary"
    export XRAY_LOCATION_CONFDIR="${parent_dir}/confs"
    nohup busybox setuidgid ${xray_user}:${xray_group} ${Bin} >/dev/null 2>&1 &
    description "✔" "is running."
  else
    log Error "Binary ${Bin} not found"
    exit 1
  fi
  echo "${Bin##*/}:$(pidof ${Bin})" >${scripts_dir}/pid.txt
  log Info "Create a new process $(pidof ${Bin})"
  add_cron
}

stop_tproxy() {
  if [ -f "${scripts_dir}/pid.txt" ]; then
    chain_name=$(awk -F ':' 'NR==1 {print $1}' ${scripts_dir}/pid.txt)
    run_del_trp >/dev/null 2>&1
    del_disable_quic
    del_cron
    description "✘" "was stopped."
    killall $(awk -F ':' 'NR==1 {print $1}' ${scripts_dir}/pid.txt) >/dev/null 2>&1
    kill -9 $(awk -F ':' 'NR==1 {print $2}' ${scripts_dir}/pid.txt) >/dev/null 2>&1
    rm ${scripts_dir}/*.list
    rm ${parent_dir}/logs/*.log
    rm ${scripts_dir}/pid.txt
  fi
}

add_trp() {
  ${1} rule add fwmark "${fwmark}" table ${2} pref $((${2} * 10))
  ${1} route add local default dev lo table ${2}
  # Create custom chain
  ${3} -t mangle -N ${4}_EXTERNAL
  ${3} -t mangle -F ${4}_EXTERNAL
  ${3} -t mangle -N ${4}_LOCAL
  ${3} -t mangle -F ${4}_LOCAL
  ${3} -t mangle -N DIVERT
  ${3} -t mangle -F DIVERT

  # Create custom chain rules
  ${3} -t mangle -A ${4}_LOCAL -p udp --dport 53 -j MARK --set-mark ${fwmark}
  ${3} -t mangle -A ${4}_LOCAL -p tcp --dport 53 -j MARK --set-mark ${fwmark}

  ${3} -t mangle -A ${4}_EXTERNAL -p udp --dport 53 -j TPROXY --on-port ${tp_port} --tproxy-mark ${fwmark}
  ${3} -t mangle -A ${4}_EXTERNAL -p tcp --dport 53 -j TPROXY --on-port ${tp_port} --tproxy-mark ${fwmark}

  for subnet in ${5}; do
    ${3} -t mangle -A ${4}_EXTERNAL -d ${subnet} -j RETURN
    ${3} -t mangle -A ${4}_LOCAL -d ${subnet} -j RETURN
  done

  ${3} -t mangle -A ${4}_EXTERNAL -p tcp -i lo -j TPROXY --on-port ${tp_port} --tproxy-mark ${fwmark}
  ${3} -t mangle -A ${4}_EXTERNAL -p udp -i lo -j TPROXY --on-port ${tp_port} --tproxy-mark ${fwmark}

  if [ "${ap_list}" != "" ]; then
    for ap in ${ap_list[@]}; do
      ${3} -t mangle -A ${4}_EXTERNAL -p tcp -i "${ap}" -j TPROXY --on-port "${tp_port}" --tproxy-mark "${fwmark}"
      ${3} -t mangle -A ${4}_EXTERNAL -p udp -i "${ap}" -j TPROXY --on-port "${tp_port}" --tproxy-mark "${fwmark}"
    done
  fi

  if [[ -n "${AIDs}" ]]; then
    for AID in ${AIDs[@]}; do
      ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${AID} -p tcp -j MARK --set-mark ${fwmark}
      ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${AID} -p udp -j MARK --set-mark ${fwmark}
    done
  fi
  case "${proxy_mode}" in
  "blacklist")
    if [[ ${#uids[@]} -gt 0 ]]; then
      for appid in ${6}; do
        ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p tcp ! --dport 53 -j RETURN
        ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p udp ! --dport 53 -j RETURN
      done
      ${3} -t mangle -A ${4}_LOCAL -j MARK --set-mark ${fwmark}
    else
      ${3} -t mangle -A ${4}_LOCAL -j MARK --set-mark ${fwmark}
    fi
    ;;
  "whitelist")
    if [[ ${#uids[@]} -gt 0 ]]; then
      for appid in ${6}; do
        ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p tcp -j MARK --set-mark ${fwmark}
        ${3} -t mangle -A ${4}_LOCAL -m owner --uid-owner ${appid} -p udp -j MARK --set-mark ${fwmark}
      done
    else
      ${3} -t mangle -A ${4}_LOCAL -j MARK --set-mark ${fwmark}
    fi
    ;;
  *)
    log Error "proxy_mode incorrect" >>"${parent_dir}/log/run.log"
    ;;
  esac

  ${3} -t mangle -I ${4}_LOCAL -m owner --gid-owner ${xray_group} -j RETURN
  ${3} -t mangle -A DIVERT -j MARK --set-mark "${fwmark}"
  ${3} -t mangle -A DIVERT -j ACCEPT

  ${3} -t mangle -A PREROUTING -j ${4}_EXTERNAL
  ${3} -t mangle -I PREROUTING -p tcp -m socket -j DIVERT
  ${3} -t mangle -A OUTPUT -j ${4}_LOCAL
}

del_trp() {
  ${1} rule del fwmark "${fwmark}" table ${2} pref $((${2} * 10))
  ${1} route del local default dev lo table ${2}
  ${1} route flush table ${2}
  ${3} -t mangle -D PREROUTING -j ${4}_EXTERNAL
  ${3} -t mangle -D PREROUTING -p tcp -m socket -j DIVERT
  ${3} -t mangle -D OUTPUT -j ${4}_LOCAL
  ${3} -t mangle -F ${4}_EXTERNAL
  ${3} -t mangle -F DIVERT
  ${3} -t mangle -F ${4}_LOCAL
  ${3} -t mangle -X ${4}_EXTERNAL
  ${3} -t mangle -X DIVERT
  ${3} -t mangle -X ${4}_LOCAL
}

run_add_trp() {
  add_trp ip "${table}" "${IPV}" "${chain_name}" "${intranet[*]}" "${uids[*]}"
  if [ "${ip6tables_switch}" = true ]; then
    add_trp "ip -6" "$((${table} * 2))" "${IP6V}" "${chain_name}6" "${intranet6[*]}" "${uids[*]}"
  fi
}

run_del_trp() {
  del_trp ip "${table}" "${IPV}" "${chain_name}"
  if [ "${ip6tables_switch}" = true ]; then
    del_trp "ip -6" "$((${table} * 2))" "${IP6V}" "${chain_name}6"
  fi
}

add_cron() {
  if [ "${crond_task}" = true ]; then
    crontab_file="${scripts_dir}/root"
    if pgrep busybox crond >/dev/null; then
      kill -9 $(pgrep busybox crond)
    fi
    echo '5 0,12 * * * touch /data/adb/modules/xlink/disable && sleep 3 && rm /data/adb/modules/xlink/disable' >${crontab_file}
    nohup busybox crond -c ${scripts_dir}/ >/dev/null 2>&1 &
    log Info "New task: $(busybox crontab -l -c ${scripts_dir}/)"
  else
    log Warn "crond_task is not set to true. No crond task created."
  fi
}

del_cron() {
  if pgrep busybox crond >/dev/null; then
    kill -9 $(pgrep busybox crond)
    rm ${scripts_dir}/root >/dev/null 2>&1
  fi
}

quic="disable"

disable_quic() {
  ${1} ${2} OUTPUT -p udp --dport 443 -m owner ! --uid-owner ${xray_user} ! --gid-owner ${xray_group} -j REJECT
  ${1} ${2} OUTPUT -p udp --dport 80 -m owner ! --uid-owner ${xray_user} ! --gid-owner ${xray_group} -j REJECT
}

run_disable_quic() {
  if [ "${quic}" = "disable" ]; then
    disable_quic "${IPV}" "-I"
    if [ "${ip6tables_switch}" = true ]; then
      disable_quic "${IP6V}" "-I"
    fi
  fi
}

del_disable_quic() {
  if [ "${quic}" = "disable" ]; then
    disable_quic "${IPV}" "-D"
    if [ "${ip6tables_switch}" = true ]; then
      disable_quic "${IP6V}" "-D"
    fi
  fi
}

version() {
  if [ -f "${Bin}" ]; then
    version=$(${Bin} version | head -n 1 | awk '{print $2}')
  fi
}

description() {
  local symbol=$1
  local event=$2
  version
  prop_file="/data/adb/modules/xlink/module.prop"
  core_name="${chain_name}"
  current_time=$(date "+[%m.%d %H:%M]")
  sed -i "/description/c\description=${current_time} ${symbol} ${core_name} ${version} ${network_mode} ${event}" "${prop_file}"
}

# xlink.service
